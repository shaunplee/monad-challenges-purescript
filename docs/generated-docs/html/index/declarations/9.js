// This file was generated by purescript-docs-search.
window.DocsSearchIndex["9"] = [["padend",[{"values":[{"sourceSpan":{"start":[301,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[301,34]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"padEnd","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Pad the given string with space from the end until the resulting string\nreaches the given length.\nNote that this function handles Unicode as you would expect.\nIf you want a simple wrapper around JavaScript's\n`String.prototype.padEnd` method, you should use `padEnd'`.\n\nExample:\n```purescript\n-- Treats strings as a sequence of Unicode code points\npadEnd   1 \"0123456789\" == \"0123456789\"\npadEnd   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd  11 \"0123456789\" == \"0123456789 \"\npadEnd  11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡 \"\npadEnd  21 \"0123456789\" == \"0123456789           \"\npadEnd  21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡           \"\n\n-- Treats strings as a sequence of Unicode code units\npadEnd'  1 \"0123456789\" == \"0123456789\"\npadEnd'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd' 11 \"0123456789\" == \"0123456789 \"\npadEnd' 11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd' 21 \"0123456789\" == \"0123456789           \"\npadEnd' 21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡 \"\n```\n"}],"tag":"SearchResult"}]],["padend'",[{"values":[{"sourceSpan":{"start":[332,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[332,35]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"padEnd'","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Wrapper around JavaScript's `String.prototype.padEnd` method.\nNote that this function treats strings as a sequence of Unicode\ncode units.\nYou will probably want to use `padEnd` instead.\n\nExample:\n```purescript\n-- Treats strings as a sequence of Unicode code points\npadEnd   1 \"0123456789\" == \"0123456789\"\npadEnd   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd  11 \"0123456789\" == \"0123456789 \"\npadEnd  11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡 \"\npadEnd  21 \"0123456789\" == \"0123456789           \"\npadEnd  21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡           \"\n\n-- Treats strings as a sequence of Unicode code units\npadEnd'  1 \"0123456789\" == \"0123456789\"\npadEnd'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd' 11 \"0123456789\" == \"0123456789 \"\npadEnd' 11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd' 21 \"0123456789\" == \"0123456789           \"\npadEnd' 21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡 \"\n```\n"}],"tag":"SearchResult"}]],["padstart",[{"values":[{"sourceSpan":{"start":[361,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[361,36]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"padStart","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Pad the given string with space from the start until the resulting string\nreaches the given length.\nNote that this function handles Unicode as you would expect.\nIf you want a simple wrapper around JavaScript's\n`String.prototype.padStart` method, you should use `padStart'`.\n\nExample:\n```purescript\n-- Treats strings as a sequence of Unicode code points\npadStart   1 \"0123456789\" == \"0123456789\"\npadStart   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart  11 \"0123456789\" == \" 0123456789\"\npadStart  11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \" 𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart  21 \"0123456789\" == \"           0123456789\"\npadStart  21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"           𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\n\n-- Treats strings as a sequence of Unicode code units\npadStart'  1 \"0123456789\" == \"0123456789\"\npadStart'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart' 11 \"0123456789\" == \" 0123456789\"\npadStart' 11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart' 21 \"0123456789\" == \"           0123456789\"\npadStart' 21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \" 𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\n```\n"}],"tag":"SearchResult"}]],["padstart'",[{"values":[{"sourceSpan":{"start":[392,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[392,37]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"padStart'","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Wrapper around JavaScript's `String.prototype.padStart` method.\nNote that this function treats strings as a sequence of Unicode\ncode units.\nYou will probably want to use `padStart` instead.\n\nExample:\n```purescript\n-- Treats strings as a sequence of Unicode code points\npadStart   1 \"0123456789\" == \"0123456789\"\npadStart   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart  11 \"0123456789\" == \" 0123456789\"\npadStart  11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \" 𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart  21 \"0123456789\" == \"           0123456789\"\npadStart  21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"           𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\n\n-- Treats strings as a sequence of Unicode code units\npadStart'  1 \"0123456789\" == \"0123456789\"\npadStart'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart' 11 \"0123456789\" == \" 0123456789\"\npadStart' 11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart' 21 \"0123456789\" == \"           0123456789\"\npadStart' 21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \" 𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\n```\n"}],"tag":"SearchResult"}]],["parity",[{"values":[{"sourceSpan":{"start":[107,1],"name":".spago/integers/v4.0.0/src/Data/Int.purs","end":[107,25]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"Parity","moduleName":"Data.Int","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A type for describing whether an integer is even or odd.\n\nThe `Ord` instance considers `Even` to be less than `Odd`.\n\nThe `Semiring` instance allows you to ask about the parity of the results\nof arithmetical operations, given only the parities of the inputs. For\nexample, the sum of an odd number and an even number is odd, so\n`Odd + Even == Odd`. This also works for multiplication, eg. the product\nof two odd numbers is odd, and therefore `Odd * Odd == Odd`.\n\nMore generally, we have that\n\n```purescript\nparity x + parity y == parity (x + y)\nparity x * parity y == parity (x * y)\n```\n\nfor any integers `x`, `y`. (A mathematician would say that `parity` is a\n*ring homomorphism*.)\n\nAfter defining addition and multiplication on `Parity` in this way, the\n`Semiring` laws now force us to choose `zero = Even` and `one = Odd`.\nThis `Semiring` instance actually turns out to be a `Field`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[147,1],"name":".spago/integers/v4.0.0/src/Data/Int.purs","end":[147,24]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"parity","moduleName":"Data.Int","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns whether an `Int` is `Even` or `Odd`.\n\n``` purescript\nparity 0 == Even\nparity 1 == Odd\n```\n"}],"tag":"SearchResult"}]],["parseflags",[{"values":[{"sourceSpan":{"start":[68,1],"name":".spago/strings/v4.0.2/src/Data/String/Regex.purs","end":[68,35]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"parseFlags","moduleName":"Data.String.Regex","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parses the string representation of `RegexFlags`.\n"}],"tag":"SearchResult"}]],["partial",[{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":[],"tag":"Builtin"},"name":"Partial","moduleName":"Prim","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The Partial type class is used to indicate that a function is *partial,*\nthat is, it is not defined for all inputs. In practice, attempting to use\na partial function with a bad input will usually cause an error to be\nthrown, although it is not safe to assume that this will happen in all\ncases. For more information, see\n[purescript-partial](https://pursuit.purescript.org/packages/purescript-partial/).\n"}],"tag":"SearchResult"}]],["partition",[{"values":[{"sourceSpan":{"start":[284,1],"name":".spago/arrays/v5.3.1/src/Data/Array/NonEmpty.purs","end":[288,38]},"score":20,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"partition","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["yes",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"RCons","contents":["no",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"REmpty","contents":{}}]}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[597,1],"name":".spago/arrays/v5.3.1/src/Data/Array.purs","end":[601,39]},"score":20,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"partition","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["yes",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"RCons","contents":["no",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"REmpty","contents":{}}]}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Partition an array using a predicate function, creating a set of\nnew arrays. One for the values satisfying the predicate function\nand one for values that don't.\n\n```purescript\npartition (_ > 0) [-1, 4, -5, 7] = { yes: [4, 7], no: [-1, -5] }\n```\n\n"}],"tag":"SearchResult"}]],["pattern",[{"values":[{"sourceSpan":{"start":[16,1],"name":".spago/strings/v4.0.2/src/Data/String/Pattern.purs","end":[16,33]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"Pattern","moduleName":"Data.String.Pattern","info":{"values":[{"typeArguments":[],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A newtype used in cases where there is a string to be matched.\n\n```purescript\npursPattern = Pattern \".purs\"\n--can be used like this:\ncontains pursPattern \"Test.purs\"\n   == true\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"Pattern","moduleName":"Data.String.Pattern","info":{"values":[{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["left",[{"values":[{"sourceSpan":null,"score":27,"packageInfo":{"values":["either"],"tag":"Package"},"name":"Left","moduleName":"Data.Either","info":{"values":[{"arguments":[{"tag":"TypeVar","contents":"a"}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["leftdiv",[{"values":[{"sourceSpan":{"start":[40,1],"name":".spago/prelude/v4.1.1/src/Data/DivisionRing.purs","end":[40,51]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"leftDiv","moduleName":"Data.DivisionRing","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","DivisionRing"],"DivisionRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Left division, defined as `leftDiv a b = recip b * a`. Left and right\ndivision are distinct in this module because a `DivisionRing` is not\nnecessarily commutative.\n\nIf the type `a` is also a `EuclideanRing`, then this function is\nequivalent to `div` from the `EuclideanRing` class. When working\nabstractly, `div` should generally be preferred, unless you know that you\nneed your code to work with noncommutative rings.\n"}],"tag":"SearchResult"}]],["length",[{"values":[{"sourceSpan":{"start":[190,1],"name":".spago/arrays/v5.3.1/src/Data/Array/NonEmpty.purs","end":[190,43]},"score":20,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"length","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[219,1],"name":".spago/arrays/v5.3.1/src/Data/Array.purs","end":[219,50]},"score":20,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"length","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the number of elements in an array.\n```purescript\nlength [\"Hello\", \"World\"] = 2\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[414,1],"name":".spago/foldable-traversable/v4.1.1/src/Data/Foldable.purs","end":[414,61]},"score":36,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"length","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the size/length of a finite structure.\nOptimized for structures that are similar to cons-lists, because there\nis no general way to do better.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[215,1],"name":".spago/strings/v4.0.2/src/Data/String/CodePoints.purs","end":[215,24]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"length","moduleName":"Data.String.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the number of code points in the string. Operates in constant\nspace and in time linear to the length of the string.\n\n```purescript\n>>> length \"b 𝐀𝐀 c 𝐀\"\n8\n-- compare to Data.String:\n>>> length \"b 𝐀𝐀 c 𝐀\"\n11\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[150,1],"name":".spago/strings/v4.0.2/src/Data/String/CodeUnits.purs","end":[150,39]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"length","moduleName":"Data.String.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the number of characters the string is composed of.\n\n```purescript\nlength \"Hello World\" == 11\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[100,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/CodePoints.purs","end":[100,32]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"length","moduleName":"Data.String.NonEmpty.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[191,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/CodeUnits.purs","end":[191,32]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"length","moduleName":"Data.String.NonEmpty.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the number of characters the string is composed of.\n\n```purescript\nlength (NonEmptyString \"Hello World\") == 11\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[219,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[221,19]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"length","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim","TypeError"],"Warn"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"DEPRECATED: `Data.String.Utils.length`"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"DEPRECATED: This function is now available in `purescript-strings`.\n\nReturn the number of Unicode code points in a string.\nNote that this function correctly accounts for Unicode symbols that\nare made up of surrogate pairs. If you want a simple wrapper around\nJavaScript's `string.length` property, you should use the\n`Data.String.CodeUnits.length` function from `purescript-strings`.\n\n```purescript\nlength \"PureScript\" == 10\nlength \"ℙ∪𝕣ⅇႽ𝚌𝕣ⅈ𝚙†\" == 10    -- 14 with `Data.String.length`\n```\n"}],"tag":"SearchResult"}]],["lessthan",[{"values":[{"sourceSpan":{"start":[122,1],"name":".spago/prelude/v4.1.1/src/Data/Ord.purs","end":[122,49]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"lessThan","moduleName":"Data.Ord","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test whether one value is _strictly less than_ another.\n"}],"tag":"SearchResult"}]],["lessthanoreq",[{"values":[{"sourceSpan":{"start":[134,1],"name":".spago/prelude/v4.1.1/src/Data/Ord.purs","end":[134,53]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"lessThanOrEq","moduleName":"Data.Ord","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test whether one value is _non-strictly less than_ another.\n"}],"tag":"SearchResult"}]],["elem",[{"values":[{"sourceSpan":{"start":[334,1],"name":".spago/foldable-traversable/v4.1.1/src/Data/Foldable.purs","end":[334,62]},"score":36,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"elem","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test whether a value is an element of a data structure.\n"}],"tag":"SearchResult"}]],["elements",[{"values":[{"sourceSpan":{"start":[73,1],"name":".spago/gen/v2.1.1/src/Control/Monad/Gen.purs","end":[73,66]},"score":7,"packageInfo":{"values":["gen"],"tag":"Package"},"name":"elements","moduleName":"Control.Monad.Gen","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semigroup","Foldable"],"Foldable1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a generator that outputs a value chosen from a selection with\nuniform probability.\n"}],"tag":"SearchResult"}]],["elemindex",[{"values":[{"sourceSpan":{"start":[239,1],"name":".spago/arrays/v5.3.1/src/Data/Array/NonEmpty.purs","end":[239,65]},"score":20,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"elemIndex","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[406,1],"name":".spago/arrays/v5.3.1/src/Data/Array.purs","end":[406,57]},"score":20,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"elemIndex","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Find the index of the first element equal to the specified element.\n\n```purescript\nelemIndex \"a\" [\"a\", \"b\", \"a\", \"c\"] = Just 0\nelemIndex \"Earth\" [\"Hello\", \"World\", \"!\"] = Nothing\n```\n\n"}],"tag":"SearchResult"}]],["elemlastindex",[{"values":[{"sourceSpan":{"start":[242,1],"name":".spago/arrays/v5.3.1/src/Data/Array/NonEmpty.purs","end":[242,69]},"score":20,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"elemLastIndex","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[416,1],"name":".spago/arrays/v5.3.1/src/Data/Array.purs","end":[416,61]},"score":20,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"elemLastIndex","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Find the index of the last element equal to the specified element.\n\n```purescript\nelemLastIndex \"a\" [\"a\", \"b\", \"a\", \"c\"] = Just 2\nelemLastIndex \"Earth\" [\"Hello\", \"World\", \"!\"] = Nothing\n```\n\n"}],"tag":"SearchResult"}]],["boolean",[{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":[],"tag":"Builtin"},"name":"Boolean","moduleName":"Prim.Boolean","info":{"values":[],"tag":"ExternKindResult"},"hashAnchor":"k","comments":"The `Boolean` kind provides True/False types at the type level\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":[],"tag":"Builtin"},"name":"Boolean","moduleName":"Prim","info":{"values":[{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]}}],"tag":"ExternDataResult"},"hashAnchor":"t","comments":"A JavaScript Boolean value.\n\nConstruct values of this type with the literals `true` and `false`.\n"}],"tag":"SearchResult"}]],["booleanalgebra",[{"values":[{"sourceSpan":{"start":[21,1],"name":".spago/prelude/v4.1.1/src/Data/BooleanAlgebra.purs","end":[21,43]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"BooleanAlgebra","moduleName":"Data.BooleanAlgebra","info":{"values":[{"superclasses":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]}],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `BooleanAlgebra` type class represents types that behave like boolean\nvalues.\n\nInstances should satisfy the following laws in addition to the\n`HeytingAlgebra` law:\n\n- Excluded middle:\n  - `a || not a = tt`\n"}],"tag":"SearchResult"}]],["booleanalgebrarecord",[{"values":[{"sourceSpan":{"start":[30,1],"name":".spago/prelude/v4.1.1/src/Data/BooleanAlgebra.purs","end":[30,109]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"BooleanAlgebraRecord","moduleName":"Data.BooleanAlgebra","info":{"values":[{"superclasses":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebraRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"},{"tag":"TypeVar","contents":"subrow"}]}],"fundeps":[[["rowlist"],["subrow"]]],"arguments":[["rowlist",null],["row",null],["subrow",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A class for records where all fields have `BooleanAlgebra` instances, used\nto implement the `BooleanAlgebra` instance for records.\n"}],"tag":"SearchResult"}]],["bottom",[{"values":[{"sourceSpan":{"start":[19,3],"name":".spago/prelude/v4.1.1/src/Data/Bounded.purs","end":[19,14]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"bottom","moduleName":"Data.Bounded","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","Bounded"],"Bounded"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["bounded",[{"values":[{"sourceSpan":{"start":[17,1],"name":".spago/prelude/v4.1.1/src/Data/Bounded.purs","end":[19,14]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Bounded","moduleName":"Data.Bounded","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]}],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Bounded` type class represents totally ordered types that have an\nupper and lower boundary.\n\nInstances should satisfy the following law in addition to the `Ord` laws:\n\n- Bounded: `bottom <= a <= top`\n"}],"tag":"SearchResult"}]],["boundedenum",[{"values":[{"sourceSpan":{"start":[113,1],"name":".spago/enums/v4.0.1/src/Data/Enum.purs","end":[116,23]},"score":9,"packageInfo":{"values":["enums"],"tag":"Package"},"name":"BoundedEnum","moduleName":"Data.Enum","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"constraintClass":[["Data","Enum"],"Enum"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]}],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"Type class for finite enumerations.\n\nThis should not be considered a part of a numeric hierarchy, as in Haskell.\nRather, this is a type class for small, ordered sum types with\nstatically-determined cardinality and the ability to easily compute\nsuccessor and predecessor elements like `DayOfWeek`.\n\nLaws:\n\n- ```succ bottom >>= succ >>= succ ... succ [cardinality - 1 times] == top```\n- ```pred top    >>= pred >>= pred ... pred [cardinality - 1 times] == bottom```\n- ```forall a > bottom: pred a >>= succ == Just a```\n- ```forall a < top:  succ a >>= pred == Just a```\n- ```forall a > bottom: fromEnum <$> pred a = pred (fromEnum a)```\n- ```forall a < top:  fromEnum <$> succ a = succ (fromEnum a)```\n- ```e1 `compare` e2 == fromEnum e1 `compare` fromEnum e2```\n- ```toEnum (fromEnum a) = Just a```\n"}],"tag":"SearchResult"}]],["ap",[{"values":[{"sourceSpan":{"start":[63,1],"name":".spago/prelude/v4.1.1/src/Control/Monad.purs","end":[63,56]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"ap","moduleName":"Control.Monad","info":{"values":[{"type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"`ap` provides a default implementation of `(<*>)` for any\n[`Monad`](#monad), without using `(<*>)` as provided by the\n[`Apply`](#apply)-[`Monad`](#monad) superclass relationship.\n\n`ap` can therefore be used to write [`Apply`](#apply) instances as\nfollows:\n\n```purescript\ninstance applyF :: Apply F where\n  apply = ap\n```\n"}],"tag":"SearchResult"}]],["append",[{"values":[{"sourceSpan":{"start":[23,3],"name":".spago/prelude/v4.1.1/src/Data/Semigroup.purs","end":[23,24]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"append","moduleName":"Data.Semigroup","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","Semigroup"],"Semigroup"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":[],"tag":"Builtin"},"name":"Append","moduleName":"Prim.Symbol","info":{"values":[{"superclasses":[],"fundeps":[[["left","right"],["appended"]],[["right","appended"],["left"]],[["appended","left"],["right"]]],"arguments":[["left",{"tag":"NamedKind","contents":[["Prim"],"Symbol"]}],["right",{"tag":"NamedKind","contents":[["Prim"],"Symbol"]}],["appended",{"tag":"NamedKind","contents":[["Prim"],"Symbol"]}]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"Compiler solved type class for appending `Symbol`s together.\n"}],"tag":"SearchResult"}]],["appendarray",[{"values":[{"sourceSpan":{"start":[207,1],"name":".spago/arrays/v5.3.1/src/Data/Array/NonEmpty.purs","end":[207,71]},"score":20,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"appendArray","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["appendrecord",[{"values":[{"sourceSpan":{"start":[51,3],"name":".spago/prelude/v4.1.1/src/Data/Semigroup.purs","end":[51,79]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"appendRecord","moduleName":"Data.Semigroup","info":{"values":[{"typeClassArguments":[["rowlist",null],["row",null],["subrow",null]],"typeClass":[["Data","Semigroup"],"SemigroupRecord"],"type":{"tag":"ForAll","contents":["rowlist",{"tag":"ForAll","contents":["row",{"tag":"ForAll","contents":["subrow",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semigroup"],"SemigroupRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"},{"tag":"TypeVar","contents":"subrow"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Data","RowList"],"RLProxy"]},{"tag":"TypeVar","contents":"rowlist"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"row"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"row"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"subrow"}]}]}]}]}]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["appendstring",[{"values":[{"sourceSpan":{"start":[77,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/Internal.purs","end":[77,59]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"appendString","moduleName":"Data.String.NonEmpty.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Appends a string to this non-empty string. Since one of the strings is\nnon-empty we know the result will be too.\n\n```purescript\nappendString (NonEmptyString \"Hello\") \" world\" == NonEmptyString \"Hello world\"\nappendString (NonEmptyString \"Hello\") \"\" == NonEmptyString \"Hello\"\n```\n"}],"tag":"SearchResult"}]],["applicative",[{"values":[{"sourceSpan":{"start":[32,1],"name":".spago/prelude/v4.1.1/src/Control/Applicative.purs","end":[33,29]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Applicative","moduleName":"Control.Applicative","info":{"values":[{"superclasses":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Applicative` type class extends the [`Apply`](#apply) type class\nwith a `pure` function, which can be used to create values of type `f a`\nfrom values of type `a`.\n\nWhere [`Apply`](#apply) provides the ability to lift functions of two or\nmore arguments to functions whose arguments are wrapped using `f`, and\n[`Functor`](#functor) provides the ability to lift functions of one\nargument, `pure` can be seen as the function which lifts functions of\n_zero_ arguments. That is, `Applicative` functors support a lifting\noperation for any number of function arguments.\n\nInstances must satisfy the following laws in addition to the `Apply`\nlaws:\n\n- Identity: `(pure identity) <*> v = v`\n- Composition: `pure (<<<) <*> f <*> g <*> h = f <*> (g <*> h)`\n- Homomorphism: `(pure f) <*> (pure x) = pure (f x)`\n- Interchange: `u <*> (pure y) = (pure (_ $ y)) <*> u`\n"}],"tag":"SearchResult"}]],["apply",[{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/prelude/v4.1.1/src/Control/Apply.purs","end":[36,48]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Apply","moduleName":"Control.Apply","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Apply` class provides the `(<*>)` which is used to apply a function\nto an argument under a type constructor.\n\n`Apply` can be used to lift functions of two or more arguments to work on\nvalues wrapped with the type constructor `f`. It might also be understood\nin terms of the `lift2` function:\n\n```purescript\nlift2 :: forall f a b c. Apply f => (a -> b -> c) -> f a -> f b -> f c\nlift2 f a b = f <$> a <*> b\n```\n\n`(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts\nthe function application operator `($)` to arguments wrapped with the\ntype constructor `f`.\n\nInstances must satisfy the following law in addition to the `Functor`\nlaws:\n\n- Associative composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`\n\nFormally, `Apply` represents a strong lax semi-monoidal endofunctor.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[36,3],"name":".spago/prelude/v4.1.1/src/Control/Apply.purs","end":[36,48]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"apply","moduleName":"Control.Apply","info":{"values":[{"typeClassArguments":[["f",null]],"typeClass":[["Control","Apply"],"Apply"],"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/prelude/v4.1.1/src/Data/Function.purs","end":[35,40]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"apply","moduleName":"Data.Function","info":{"values":[{"type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Applies a function to an argument. This is primarily used as the operator\n`($)` which allows parentheses to be omitted in some cases, or as a\nnatural way to apply a chain of composed functions to a value.\n"}],"tag":"SearchResult"}]],["applyfirst",[{"values":[{"sourceSpan":{"start":[49,1],"name":".spago/prelude/v4.1.1/src/Control/Apply.purs","end":[49,57]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"applyFirst","moduleName":"Control.Apply","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Combine two effectful actions, keeping only the result of the first.\n"}],"tag":"SearchResult"}]],["applyflipped",[{"values":[{"sourceSpan":{"start":[61,1],"name":".spago/prelude/v4.1.1/src/Data/Function.purs","end":[61,47]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"applyFlipped","moduleName":"Data.Function","info":{"values":[{"type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Applies an argument to a function. This is primarily used as the `(#)`\noperator, which allows parentheses to be ommitted in some cases, or as a\nnatural way to apply a value to a chain of composed functions.\n"}],"tag":"SearchResult"}]],["applyn",[{"values":[{"sourceSpan":{"start":[91,1],"name":".spago/prelude/v4.1.1/src/Data/Function.purs","end":[91,46]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"applyN","moduleName":"Data.Function","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"`applyN f n` applies the function `f` to its argument `n` times.\n\nIf n is less than or equal to 0, the function is not applied.\n\n```purescript\napplyN (_ + 1) 10 0 == 10\n```\n"}],"tag":"SearchResult"}]],["applysecond",[{"values":[{"sourceSpan":{"start":[55,1],"name":".spago/prelude/v4.1.1/src/Control/Apply.purs","end":[55,58]},"score":84,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"applySecond","moduleName":"Control.Apply","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Combine two effectful actions, keeping only the result of the second.\n"}],"tag":"SearchResult"}]]]