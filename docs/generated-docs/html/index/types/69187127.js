// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["69187127"] = [{"values":[{"sourceSpan":{"start":[68,1],"name":".spago/math/v2.1.1/src/Math.purs","end":[68,55]},"score":12,"packageInfo":{"values":["math"],"tag":"Package"},"name":"remainder","moduleName":"Math","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Computes the remainder after division, wrapping Javascript's `%` operator.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[49,1],"name":".spago/math/v2.1.1/src/Math.purs","end":[49,49]},"score":12,"packageInfo":{"values":["math"],"tag":"Package"},"name":"pow","moduleName":"Math","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Return  the first argument exponentiated to the power of the second argument.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[46,1],"name":".spago/math/v2.1.1/src/Math.purs","end":[46,49]},"score":12,"packageInfo":{"values":["math"],"tag":"Package"},"name":"min","moduleName":"Math","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the smallest of two numbers.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[43,1],"name":".spago/math/v2.1.1/src/Math.purs","end":[43,49]},"score":12,"packageInfo":{"values":["math"],"tag":"Package"},"name":"max","moduleName":"Math","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the largest of two numbers.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[25,1],"name":".spago/math/v2.1.1/src/Math.purs","end":[25,52]},"score":12,"packageInfo":{"values":["math"],"tag":"Package"},"name":"atan2","moduleName":"Math","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Four-quadrant tangent inverse. Given the arguments `y` and `x`, returns\nthe inverse tangent of `y / x`, where the signs of both arguments are used\nto determine the sign of the result.\nIf the first argument is negative, the result will be negative.\nThe result is the angle between the positive x axis and  a point `(x, y)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[36,1],"name":".spago/globals/v5.0.0/src/Global.purs","end":[36,50]},"score":6,"packageInfo":{"values":["globals"],"tag":"Package"},"name":"readInt","moduleName":"Global","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse an integer from a `String` in the specified base\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[25,1],"name":".spago/globals/v5.0.0/src/Global/Unsafe.purs","end":[25,60]},"score":6,"packageInfo":{"values":["globals"],"tag":"Package"},"name":"unsafeToPrecision","moduleName":"Global.Unsafe","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Formats Number as String in fixed-point or exponential notation rounded\nto specified number of significant digits.\n\nMay throw RangeError if the number of digits is not within the allowed range\n(standard precision range is 0 to 100, but implementations may change it)\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[18,1],"name":".spago/globals/v5.0.0/src/Global/Unsafe.purs","end":[18,62]},"score":6,"packageInfo":{"values":["globals"],"tag":"Package"},"name":"unsafeToExponential","moduleName":"Global.Unsafe","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Formats Number as String in exponential notation limiting number of digits\nafter the decimal dot.\n\nMay throw RangeError if the number of digits is not within the allowed range\n(standard precision range is 0 to 20, but implementations may change it)\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[11,1],"name":".spago/globals/v5.0.0/src/Global/Unsafe.purs","end":[11,56]},"score":6,"packageInfo":{"values":["globals"],"tag":"Package"},"name":"unsafeToFixed","moduleName":"Global.Unsafe","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Formats Number as a String with limited number of digits after the dot.\n\nMay throw RangeError if the number of digits is not within the allowed range\n(standard precision range is 0 to 20, but implementations may change it)\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[608,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[608,40]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"unsafeRepeat","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Return a string that contains the specified number of copies of the input\nstring concatenated together.\n\n**Unsafe:** Throws runtime exception if the repeat count is negative or if\nthe resulting string would overflow the maximum string size.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[598,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[598,43]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"unsafeCodePointAt'","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Return the Unicode code point value of the character at the given index,\nif the index is within bounds.\nThis function is a simple (unsafe) wrapper around JavaScript's\n`String.prototype.codePointAt` method. This means that if the index does\nnot point to the beginning of a valid surrogate pair, the code unit at\nthe index (i.e. the Unicode code point of the surrogate pair half) is\nreturned instead.\nIf you want to treat a string as an array of Unicode Code Points, use\n`unsafeCodePointAt` instead.\n\nExample:\n```purescript\nunsafeCodePointAt'  0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120793\nunsafeCodePointAt'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 57304   -- Surrogate code point\nunsafeCodePointAt'  2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120794\nunsafeCodePointAt' 19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 57313   -- Surrogate code point\n\nunsafeCodePointAt   0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120792\nunsafeCodePointAt   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120793\nunsafeCodePointAt   2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120794\nunsafeCodePointAt  19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" -- Error\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[571,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[571,42]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"unsafeCodePointAt","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Return the Unicode code point value of the character at the given index,\nif the index is within bounds.\nNote that this function handles Unicode as you would expect.\nIf you want a simple (unsafe) wrapper around JavaScript's\n`String.prototype.codePointAt` method, you should use `unsafeCodePointAt'`.\n\n**Unsafe:** Throws runtime exception if the index is not within bounds.\n\nExample:\n```purescript\nunsafeCodePointAt   0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120792\nunsafeCodePointAt   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120793\nunsafeCodePointAt   2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120794\nunsafeCodePointAt  19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" -- Error\n\nunsafeCodePointAt'  0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120793\nunsafeCodePointAt'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 57304   -- Surrogate code point\nunsafeCodePointAt'  2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120794\nunsafeCodePointAt' 19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 57313   -- Surrogate code point\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[501,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[501,46]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"stripMarginWith","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Same as `stripMargin` except with the option to use any given string\nto delimit the margin.\nDoes not preserve original line endings.\n\nExample:\n```purescript\nstripMarginWith \">> \"\n  \"\"\"\n  >> Line 1\n  >> Line 2\n  >> Line 3\n  \"\"\"\n== \"Line 1\\nLine 2\\nLine 3\"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[447,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[447,41]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"stripChars","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Strip a set of characters from a string.\nThis function is case-sensitive.\n\nExample:\n```purescript\nstripChars \"aeiou\" \"PureScript\" == \"PrScrpt\"\nstripChars \"AEIOU\" \"PureScript\" == \"PureScript\"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[426,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[426,42]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"startsWith","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Determine whether the second argument starts with the first one.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[392,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[392,37]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"padStart'","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Wrapper around JavaScript's `String.prototype.padStart` method.\nNote that this function treats strings as a sequence of Unicode\ncode units.\nYou will probably want to use `padStart` instead.\n\nExample:\n```purescript\n-- Treats strings as a sequence of Unicode code points\npadStart   1 \"0123456789\" == \"0123456789\"\npadStart   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart  11 \"0123456789\" == \" 0123456789\"\npadStart  11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \" 𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart  21 \"0123456789\" == \"           0123456789\"\npadStart  21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"           𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\n\n-- Treats strings as a sequence of Unicode code units\npadStart'  1 \"0123456789\" == \"0123456789\"\npadStart'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart' 11 \"0123456789\" == \" 0123456789\"\npadStart' 11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart' 21 \"0123456789\" == \"           0123456789\"\npadStart' 21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \" 𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[361,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[361,36]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"padStart","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Pad the given string with space from the start until the resulting string\nreaches the given length.\nNote that this function handles Unicode as you would expect.\nIf you want a simple wrapper around JavaScript's\n`String.prototype.padStart` method, you should use `padStart'`.\n\nExample:\n```purescript\n-- Treats strings as a sequence of Unicode code points\npadStart   1 \"0123456789\" == \"0123456789\"\npadStart   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart  11 \"0123456789\" == \" 0123456789\"\npadStart  11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \" 𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart  21 \"0123456789\" == \"           0123456789\"\npadStart  21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"           𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\n\n-- Treats strings as a sequence of Unicode code units\npadStart'  1 \"0123456789\" == \"0123456789\"\npadStart'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart' 11 \"0123456789\" == \" 0123456789\"\npadStart' 11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadStart' 21 \"0123456789\" == \"           0123456789\"\npadStart' 21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \" 𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[332,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[332,35]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"padEnd'","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Wrapper around JavaScript's `String.prototype.padEnd` method.\nNote that this function treats strings as a sequence of Unicode\ncode units.\nYou will probably want to use `padEnd` instead.\n\nExample:\n```purescript\n-- Treats strings as a sequence of Unicode code points\npadEnd   1 \"0123456789\" == \"0123456789\"\npadEnd   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd  11 \"0123456789\" == \"0123456789 \"\npadEnd  11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡 \"\npadEnd  21 \"0123456789\" == \"0123456789           \"\npadEnd  21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡           \"\n\n-- Treats strings as a sequence of Unicode code units\npadEnd'  1 \"0123456789\" == \"0123456789\"\npadEnd'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd' 11 \"0123456789\" == \"0123456789 \"\npadEnd' 11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd' 21 \"0123456789\" == \"0123456789           \"\npadEnd' 21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡 \"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[301,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[301,34]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"padEnd","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Pad the given string with space from the end until the resulting string\nreaches the given length.\nNote that this function handles Unicode as you would expect.\nIf you want a simple wrapper around JavaScript's\n`String.prototype.padEnd` method, you should use `padEnd'`.\n\nExample:\n```purescript\n-- Treats strings as a sequence of Unicode code points\npadEnd   1 \"0123456789\" == \"0123456789\"\npadEnd   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd  11 \"0123456789\" == \"0123456789 \"\npadEnd  11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡 \"\npadEnd  21 \"0123456789\" == \"0123456789           \"\npadEnd  21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡           \"\n\n-- Treats strings as a sequence of Unicode code units\npadEnd'  1 \"0123456789\" == \"0123456789\"\npadEnd'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd' 11 \"0123456789\" == \"0123456789 \"\npadEnd' 11 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\"\npadEnd' 21 \"0123456789\" == \"0123456789           \"\npadEnd' 21 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡 \"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[272,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[272,52]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"normalize'","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Utils"],"NormalizationForm"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Return a given Unicode Normalization Form of a string.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[182,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[182,40]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"includes","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Determine whether the second arguments contains the first one.\n\nExample:\n```purescript\nincludes \"Merchant\" \"The Merchant of Venice\" === true\nincludes \"Duncan\"   \"The Merchant of Venice\" === false\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[133,1],"name":".spago/stringutils/v0.0.10/src/Data/String/Utils.purs","end":[133,40]},"score":1,"packageInfo":{"values":["stringutils"],"tag":"Package"},"name":"endsWith","moduleName":"Data.String.Utils","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Determine whether the second string ends with the first one.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[10,1],"name":".spago/strings/v4.0.2/src/Data/String/Unsafe.purs","end":[10,47]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"charAt","moduleName":"Data.String.Unsafe","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the character at the given index.\n\n**Unsafe:** throws runtime exception if the index is out of bounds.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[80,1],"name":".spago/strings/v4.0.2/src/Data/String/Regex.purs","end":[80,50]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"test","moduleName":"Data.String.Regex","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns `true` if the `Regex` matches the string. In contrast to\n`RegExp.prototype.test()` in JavaScript, `test` does not affect\nthe `lastIndex` property of the Regex.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[13,1],"name":".spago/strings/v4.0.2/src/Data/String/Regex/Unsafe.purs","end":[13,45]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"unsafeRegex","moduleName":"Data.String.Regex.Unsafe","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Constructs a `Regex` from a pattern string and flags. Fails with\nan exception if the pattern contains a syntax error.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[131,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/Internal.purs","end":[131,62]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"localeCompare","moduleName":"Data.String.NonEmpty.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Compare two strings in a locale-aware fashion. This is in contrast to\nthe `Ord` instance on `String` which treats strings as arrays of code\nunits:\n\n```purescript\nNonEmptyString \"ä\" `localeCompare` NonEmptyString \"b\" == LT\nNonEmptyString \"ä\" `compare` NonEmptyString \"b\" == GT\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[120,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/Internal.purs","end":[120,49]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"contains","moduleName":"Data.String.NonEmpty.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Checks whether the pattern appears in the given string.\n\n```purescript\ncontains (Pattern \"needle\") (NonEmptyString \"haystack with needle\") == true\ncontains (Pattern \"needle\") (NonEmptyString \"haystack\") == false\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[87,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/Internal.purs","end":[87,60]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"prependString","moduleName":"Data.String.NonEmpty.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Prepends a string to this non-empty string. Since one of the strings is\nnon-empty we know the result will be too.\n\n```purescript\nprependString \"be\" (NonEmptyString \"fore\") == NonEmptyString \"before\"\nprependString \"\" (NonEmptyString \"fore\") == NonEmptyString \"fore\"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[77,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/Internal.purs","end":[77,59]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"appendString","moduleName":"Data.String.NonEmpty.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Appends a string to this non-empty string. Since one of the strings is\nnon-empty we know the result will be too.\n\n```purescript\nappendString (NonEmptyString \"Hello\") \" world\" == NonEmptyString \"Hello world\"\nappendString (NonEmptyString \"Hello\") \"\" == NonEmptyString \"Hello\"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[85,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/CodeUnits.purs","end":[85,41]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"snoc","moduleName":"Data.String.NonEmpty.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a `NonEmptyString` from a string by appending a character.\n\n```purescript\nsnoc 'c' \"ab\" = NonEmptyString \"abc\"\nsnoc 'a' \"\" = NonEmptyString \"a\"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[76,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/CodeUnits.purs","end":[76,41]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"cons","moduleName":"Data.String.NonEmpty.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a `NonEmptyString` from a string by prepending a character.\n\n```purescript\ncons 'a' \"bc\" = NonEmptyString \"abc\"\ncons 'a' \"\" = NonEmptyString \"a\"\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[64,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/CodePoints.purs","end":[64,46]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"snoc","moduleName":"Data.String.NonEmpty.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[61,1],"name":".spago/strings/v4.0.2/src/Data/String/NonEmpty/CodePoints.purs","end":[61,46]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"cons","moduleName":"Data.String.NonEmpty.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[34,1],"name":".spago/strings/v4.0.2/src/Data/String/Common.purs","end":[34,46]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"localeCompare","moduleName":"Data.String.Common","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Compare two strings in a locale-aware fashion. This is in contrast to\nthe `Ord` instance on `String` which treats strings as arrays of code\nunits:\n\n```purescript\n\"ä\" `localeCompare` \"b\" == LT\n\"ä\" `compare` \"b\" == GT\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[280,1],"name":".spago/strings/v4.0.2/src/Data/String/CodeUnits.purs","end":[280,37]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"dropRight","moduleName":"Data.String.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the string without the last `n` characters.\n\n```purescript\ndropRight 6 \"Hello World\" == \"Hello\"\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[272,1],"name":".spago/strings/v4.0.2/src/Data/String/CodeUnits.purs","end":[272,47]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"drop","moduleName":"Data.String.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the string without the first `n` characters.\n\n```purescript\ndrop 6 \"Hello World\" == \"World\"\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[253,1],"name":".spago/strings/v4.0.2/src/Data/String/CodeUnits.purs","end":[253,37]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"takeRight","moduleName":"Data.String.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the last `n` characters of the string.\n\n```purescript\ntakeRight 5 \"Hello World\" == \"World\"\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[245,1],"name":".spago/strings/v4.0.2/src/Data/String/CodeUnits.purs","end":[245,47]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"take","moduleName":"Data.String.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the first `n` characters of the string.\n\n```purescript\ntake 5 \"Hello World\" == \"Hello\"\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[70,1],"name":".spago/strings/v4.0.2/src/Data/String/CodeUnits.purs","end":[70,41]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"contains","moduleName":"Data.String.CodeUnits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Checks whether the pattern appears in the given string.\n\n```purescript\ncontains (Pattern \"needle\") \"haystack with needle\" == true\ncontains (Pattern \"needle\") \"haystack\" == false\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[351,1],"name":".spago/strings/v4.0.2/src/Data/String/CodePoints.purs","end":[351,32]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"drop","moduleName":"Data.String.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Drops the given number of code points from the beginning of the string. If\nthe string does not have that many code points, returns the empty string.\nOperates in constant space and in time linear to the given number.\n\n```purescript\n>>> drop 5 \"𝐀𝐀 b c\"\n\"c\"\n-- compared to Data.String:\n>>> drop 5 \"𝐀𝐀 b c\"\n\"b c\" -- because \"𝐀\" occupies 2 code units\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[316,1],"name":".spago/strings/v4.0.2/src/Data/String/CodePoints.purs","end":[316,32]},"score":16,"packageInfo":{"values":["strings"],"tag":"Package"},"name":"take","moduleName":"Data.String.CodePoints","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns a string containing the given number of code points from the\nbeginning of the given string. If the string does not have that many code\npoints, returns the empty string. Operates in constant space and in time\nlinear to the given number.\n\n```purescript\n>>> take 3 \"b 𝐀𝐀 c 𝐀\"\n\"b 𝐀\"\n-- compare to Data.String:\n>>> take 3 \"b 𝐀𝐀 c 𝐀\"\n\"b �\"\n```\n\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[243,1],"name":".spago/integers/v4.0.0/src/Data/Int.purs","end":[243,40]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"pow","moduleName":"Data.Int","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Raise an Int to the power of another Int.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[240,1],"name":".spago/integers/v4.0.0/src/Data/Int.purs","end":[240,40]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"rem","moduleName":"Data.Int","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The `rem` function provides the remainder after _truncating_ integer\ndivision (see the documentation for the `EuclideanRing` class). It is\nidentical to `mod` in the `EuclideanRing Int` instance if the dividend is\npositive, but will be slightly different if the dividend is negative. For\nexample:\n\n```purescript\nmod 2 3 == 2\nrem 2 3 == 2\n\nmod (-2) 3 == 1\nrem (-2) 3 == (-2)\n\nmod 2 (-3) == 2\nrem 2 (-3) == 2\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[222,1],"name":".spago/integers/v4.0.0/src/Data/Int.purs","end":[222,41]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"quot","moduleName":"Data.Int","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The `quot` function provides _truncating_ integer division (see the\ndocumentation for the `EuclideanRing` class). It is identical to `div` in\nthe `EuclideanRing Int` instance if the dividend is positive, but will be\nslightly different if the dividend is negative. For example:\n\n```purescript\ndiv 2 3 == 0\nquot 2 3 == 0\n\ndiv (-2) 3 == (-1)\nquot (-2) 3 == 0\n\ndiv 2 (-3) == 0\nquot 2 (-3) == 0\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[252,1],"name":".spago/integers/v4.0.0/src/Data/Int.purs","end":[252,52]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"toStringAs","moduleName":"Data.Int","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[34,1],"name":".spago/integers/v4.0.0/src/Data/Int/Bits.purs","end":[34,41]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"zshr","moduleName":"Data.Int.Bits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Bitwise zero-fill shift right.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[31,1],"name":".spago/integers/v4.0.0/src/Data/Int/Bits.purs","end":[31,40]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"shr","moduleName":"Data.Int.Bits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Bitwise shift right.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[28,1],"name":".spago/integers/v4.0.0/src/Data/Int/Bits.purs","end":[28,40]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"shl","moduleName":"Data.Int.Bits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Bitwise shift left.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/integers/v4.0.0/src/Data/Int/Bits.purs","end":[23,40]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"xor","moduleName":"Data.Int.Bits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Bitwise XOR.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[18,1],"name":".spago/integers/v4.0.0/src/Data/Int/Bits.purs","end":[18,39]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"or","moduleName":"Data.Int.Bits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Bitwise OR.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[13,1],"name":".spago/integers/v4.0.0/src/Data/Int/Bits.purs","end":[13,40]},"score":16,"packageInfo":{"values":["integers"],"tag":"Package"},"name":"and","moduleName":"Data.Int.Bits","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Bitwise AND.\n"}],"tag":"SearchResult"}]